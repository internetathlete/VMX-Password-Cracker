#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
vmx-password-cracker-gui.py: 支持全版本VMware VMX文件的密码爆破工具（GUI版本）

本工具结合了pyvmx-cracker和VMwareVMX模块的功能，可以对新旧版本的VMware VMX加密文件进行密码爆破。
支持字典攻击方式，可以处理AES-256和XTS-AES-256加密算法。
"""

__author__ = 'Trae AI (基于axcheron的pyvmx-cracker和Robert Federle的VMwareVMX)'
__license__ = 'MIT License'
__version__ = '1.0.0'

import sys
import os
import re
import time
import hashlib
import hmac
import random
from base64 import b64decode
from binascii import hexlify
from urllib.parse import unquote
from threading import Thread

# 在Windows下隐藏控制台窗口
if sys.platform == "win32":
    import ctypes
    import ctypes.wintypes
    
    # 获取控制台窗口句柄
    kernel32 = ctypes.windll.kernel32
    user32 = ctypes.windll.user32
    
    # 隐藏控制台窗口
    def hide_console():
        try:
            # 获取当前控制台窗口
            console_window = kernel32.GetConsoleWindow()
            if console_window != 0:
                # 隐藏窗口 (SW_HIDE = 0)
                user32.ShowWindow(console_window, 0)
        except:
            pass
    
    # 立即隐藏控制台
    hide_console()

# PyQt5 导入
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QLineEdit, QTextEdit, QFileDialog,
                             QProgressBar, QMessageBox, QGroupBox, QCheckBox, QSpinBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, pyqtSlot
from PyQt5.QtGui import QFont, QIcon, QTextCursor, QPixmap
import base64

try:
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import pad
    from Crypto import Random
except ImportError:
    try:
        from Cryptodome.Cipher import AES
        from Cryptodome.Util.Padding import pad
        from Cryptodome import Random
    except ImportError:
        print("错误: 请安装 pycryptodome 或 pycrypto 库")
        print("使用命令: pip install pycryptodome")
        sys.exit(1)

# 常量定义
HASH_ROUNDS_DEFAULT = 10000
IDENTIFIER_SIZE = 8
SALT_SIZE = 16
AES_IV_SIZE = AES.block_size
AES_KEY_SIZE = 32  # AES-256 (256 // 8)
XTS_KEY_SIZE = AES_KEY_SIZE * 2  # XTS-AES-256
HASH_SIZE = 20  # SHA-1

# 程序Logo（base64编码的图片）
# 请将您的图片转换为base64字符串并填充到下面的变量中
LOGO_BASE64 = """
"""

# 正则表达式模式
KS_RE_OLD = '.+phrase/(.*?)/pass2key=(.*?):cipher=(.*?):rounds=(.*?):salt=(.*?),(.*?),(.*?)\\)'
KS_RE_NEW = '.+phrase/(.*?)/pass2key=(.*?):cipher=(.*?):rounds=(.*?):salt=(.*?),(.*?),(.*?)\\)'
# 添加对VMware Workstation 16及更高版本的支持
KS_RE_NEWER = 'vmware:key/list/\\(pair/\\(phrase/(.*?)/pass2key=(.*?):cipher=(.*?):rounds=(.*?):salt=(.*?),(.*?),(.*?)\\)\\)'

# 密钥安全结构
ks_struct = {
    'id': None,
    'password_hash': None,
    'password_cipher': None,
    'hash_round': None,
    'salt': None,
    'config_hash': None,
    'dict': None
}


class CrackerThread(QThread):
    """密码破解线程类"""
    update_signal = pyqtSignal(str)  # 更新日志信号
    progress_signal = pyqtSignal(int)  # 更新进度信号
    result_signal = pyqtSignal(str)  # 结果信号
    finished_signal = pyqtSignal(bool)  # 完成信号，参数表示是否成功

    def __init__(self, keysafe, dict_file, verbose=False, update_interval=100):
        super().__init__()
        self.keysafe = keysafe
        self.dict_file = dict_file
        self.verbose = verbose
        self.update_interval = update_interval
        self.running = True

    def run(self):
        """运行破解线程"""
        try:
            wordlist = open(self.dict_file, 'r', encoding='utf-8', errors='ignore')
            lines = wordlist.readlines()
            total_passwords = len(lines)
            self.update_signal.emit(f"[*] 加载了 {total_passwords} 个密码")
            
            # 确定密钥大小
            if self.keysafe['password_cipher'] == 'AES-256':
                key_size = AES_KEY_SIZE
            elif self.keysafe['password_cipher'] == 'XTS-AES-256':
                key_size = XTS_KEY_SIZE
            else:
                self.update_signal.emit(f"[-] 不支持的加密算法: {self.keysafe['password_cipher']}")
                self.finished_signal.emit(False)
                return

            count = 0
            self.update_signal.emit("\n[*] 开始暴力破解...")

            for line in lines:
                if not self.running:
                    self.update_signal.emit("\n[!] 破解已中止")
                    self.finished_signal.emit(False)
                    wordlist.close()
                    return
                    
                password = line.rstrip()
                
                # 使用PBKDF2-HMAC-SHA-1生成字典密钥
                dict_key = hashlib.pbkdf2_hmac('sha1', password.encode(), self.keysafe['salt'],
                                            self.keysafe['hash_round'], key_size)

                # 提取AES IV并解密字典
                dict_aes_iv = self.keysafe['dict'][:AES_IV_SIZE]
                cipher = AES.new(dict_key[:AES_KEY_SIZE], AES.MODE_CBC, dict_aes_iv)
                dict_dec = cipher.decrypt(self.keysafe['dict'][AES_IV_SIZE:-HASH_SIZE])

                # 更新进度
                count += 1
                if count % self.update_interval == 0 or self.verbose:
                    self.update_signal.emit(f"\t已测试 {count} 个密码...")
                    progress = int((count / total_passwords) * 100)
                    self.progress_signal.emit(progress)

                try:
                    # 检查解密后的字典是否包含预期的字符串
                    dict_str = dict_dec.decode('ascii', errors='ignore')
                    if 'type=key:cipher=AES-256:key=' in dict_str or 'type=key:cipher=XTS-AES-256:key=' in dict_str:
                        self.update_signal.emit(f"\n[+] 密码找到 = {password}")
                        self.result_signal.emit(password)
                        self.finished_signal.emit(True)
                        wordlist.close()
                        return
                except UnicodeDecodeError:
                    pass

            self.update_signal.emit("\n[-] 未找到密码。请尝试其他字典。")
            self.finished_signal.emit(False)
            wordlist.close()
            
        except Exception as e:
            self.update_signal.emit(f"\n[-] 错误: {str(e)}")
            self.finished_signal.emit(False)
    
    def stop(self):
        """停止破解线程"""
        self.running = False


def parse_keysafe(file):
    """解析VMX文件中的密钥安全信息
    
    Args:
        file: VMX文件路径
        
    Returns:
        解析后的密钥安全结构
    """
    try:
        with open(file, 'r', encoding='utf-8', errors='ignore') as data:
            lines = data.readlines()
    except (OSError, IOError) as e:
        raise IOError(f'无法读取文件 {file}: {str(e)}')

    keysafe_line = None
    for line in lines:
        if 'encryption.keySafe' in line:
            keysafe_line = line
            break
    
    if not keysafe_line:
        raise ValueError('无效的VMX文件或VMX文件未加密')

    keysafe_line = unquote(keysafe_line)
    
    # 尝试匹配新旧格式
    match = re.match(KS_RE_OLD, keysafe_line) or re.match(KS_RE_NEW, keysafe_line) or re.match(KS_RE_NEWER, keysafe_line)
    if not match:
        msg = '不支持的encryption.keySafe行格式:\n' + keysafe_line
        raise ValueError(msg)

    vmx_ks = ks_struct.copy()

    # 解析密钥安全信息
    vmx_ks['id'] = hexlify(b64decode(match.group(1))).decode()
    vmx_ks['password_hash'] = match.group(2)
    vmx_ks['password_cipher'] = match.group(3)
    vmx_ks['hash_round'] = int(match.group(4))
    vmx_ks['salt'] = b64decode(unquote(match.group(5)))
    vmx_ks['config_hash'] = match.group(6)
    vmx_ks['dict'] = b64decode(match.group(7))

    return vmx_ks


class VMXCrackerGUI(QMainWindow):
    """VMX密码破解工具GUI界面"""
    def __init__(self):
        super().__init__()
        self.cracker_thread = None
        self.keysafe = None
        self.init_ui()
    
    def set_window_icon(self):
        """设置窗口图标"""
        try:
            # 优先使用base64图片
            if LOGO_BASE64.strip():
                # 从base64字符串创建图标
                image_data = base64.b64decode(LOGO_BASE64)
                pixmap = QPixmap()
                pixmap.loadFromData(image_data)
                icon = QIcon(pixmap)
                self.setWindowIcon(icon)
            # 如果base64为空，则尝试使用文件图标
            elif os.path.exists('output.ico'):
                self.setWindowIcon(QIcon('output.ico'))
        except Exception as e:
            # 如果加载失败，尝试使用文件图标作为备用
            if os.path.exists('output.ico'):
                self.setWindowIcon(QIcon('output.ico'))

    def init_ui(self):
        """初始化用户界面"""
        self.setWindowTitle(f"VMX Password Cracker GUI - v{__version__}")
        self.setGeometry(100, 100, 800, 600)
        
        # 设置程序图标
        self.set_window_icon()
        
        # 创建中央部件
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        
        # 文件选择区域
        file_group = QGroupBox("文件选择")
        file_layout = QVBoxLayout()
        
        # VMX文件选择
        vmx_layout = QHBoxLayout()
        vmx_label = QLabel("VMX文件:")
        self.vmx_path = QLineEdit()
        self.vmx_path.setReadOnly(True)
        vmx_browse = QPushButton("浏览...")
        vmx_browse.clicked.connect(self.browse_vmx)
        vmx_layout.addWidget(vmx_label)
        vmx_layout.addWidget(self.vmx_path)
        vmx_layout.addWidget(vmx_browse)
        file_layout.addLayout(vmx_layout)
        
        # 字典文件选择
        dict_layout = QHBoxLayout()
        dict_label = QLabel("密码字典:")
        self.dict_path = QLineEdit()
        self.dict_path.setReadOnly(True)
        dict_browse = QPushButton("浏览...")
        dict_browse.clicked.connect(self.browse_dict)
        dict_layout.addWidget(dict_label)
        dict_layout.addWidget(self.dict_path)
        dict_layout.addWidget(dict_browse)
        file_layout.addLayout(dict_layout)
        
        file_group.setLayout(file_layout)
        main_layout.addWidget(file_group)
        
        # 选项区域
        options_group = QGroupBox("选项")
        options_layout = QHBoxLayout()
        
        # 详细输出选项
        self.verbose_check = QCheckBox("详细输出")
        options_layout.addWidget(self.verbose_check)
        
        # 更新间隔选项
        update_layout = QHBoxLayout()
        update_label = QLabel("更新间隔:")
        self.update_interval = QSpinBox()
        self.update_interval.setRange(10, 10000)
        self.update_interval.setValue(100)
        self.update_interval.setSingleStep(10)
        update_layout.addWidget(update_label)
        update_layout.addWidget(self.update_interval)
        options_layout.addLayout(update_layout)
        options_layout.addStretch()
        
        options_group.setLayout(options_layout)
        main_layout.addWidget(options_group)
        
        # 密钥安全信息区域
        ks_group = QGroupBox("密钥安全信息")
        ks_layout = QVBoxLayout()
        self.ks_info = QTextEdit()
        self.ks_info.setReadOnly(True)
        ks_layout.addWidget(self.ks_info)
        ks_group.setLayout(ks_layout)
        main_layout.addWidget(ks_group)
        
        # 日志输出区域
        log_group = QGroupBox("日志输出")
        log_layout = QVBoxLayout()
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        log_layout.addWidget(self.log_output)
        log_group.setLayout(log_layout)
        main_layout.addWidget(log_group)
        
        # 进度条
        progress_layout = QHBoxLayout()
        progress_label = QLabel("进度:")
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        progress_layout.addWidget(progress_label)
        progress_layout.addWidget(self.progress_bar)
        main_layout.addLayout(progress_layout)
        
        # 结果区域
        result_layout = QHBoxLayout()
        result_label = QLabel("密码:")
        self.result_field = QLineEdit()
        self.result_field.setReadOnly(True)
        result_layout.addWidget(result_label)
        result_layout.addWidget(self.result_field)
        main_layout.addLayout(result_layout)
        
        # 按钮区域
        button_layout = QHBoxLayout()
        self.parse_button = QPushButton("解析VMX")
        self.parse_button.clicked.connect(self.parse_vmx)
        self.start_button = QPushButton("开始破解")
        self.start_button.clicked.connect(self.start_cracking)
        self.start_button.setEnabled(False)
        self.stop_button = QPushButton("停止破解")
        self.stop_button.clicked.connect(self.stop_cracking)
        self.stop_button.setEnabled(False)
        self.save_button = QPushButton("保存结果")
        self.save_button.clicked.connect(self.save_results)
        self.save_button.setEnabled(False)
        button_layout.addWidget(self.parse_button)
        button_layout.addWidget(self.start_button)
        button_layout.addWidget(self.stop_button)
        button_layout.addWidget(self.save_button)
        main_layout.addLayout(button_layout)
        
        # 显示初始信息
        self.log("欢迎使用VMX Password Cracker GUI")
        self.log(f"版本: {__version__}")
        self.log("请选择VMX文件和密码字典文件")
    
    def browse_vmx(self):
        """浏览选择VMX文件"""
        file_path, _ = QFileDialog.getOpenFileName(self, "选择VMX文件", "", "VMX文件 (*.vmx);;所有文件 (*)")
        if file_path:
            self.vmx_path.setText(file_path)
            self.log(f"已选择VMX文件: {file_path}")
    
    def browse_dict(self):
        """浏览选择字典文件"""
        file_path, _ = QFileDialog.getOpenFileName(self, "选择密码字典", "", "文本文件 (*.txt);;所有文件 (*)")
        if file_path:
            self.dict_path.setText(file_path)
            self.log(f"已选择密码字典: {file_path}")
    
    def parse_vmx(self):
        """解析VMX文件"""
        vmx_file = self.vmx_path.text()
        if not vmx_file:
            QMessageBox.warning(self, "警告", "请先选择VMX文件")
            return
        
        try:
            self.log("正在解析VMX文件...")
            self.keysafe = parse_keysafe(vmx_file)
            self.display_keysafe_info()
            self.start_button.setEnabled(True)
            self.log("VMX文件解析成功，可以开始破解")
        except Exception as e:
            QMessageBox.critical(self, "错误", f"解析VMX文件失败: {str(e)}")
            self.log(f"错误: {str(e)}")
    
    def display_keysafe_info(self):
        """显示密钥安全信息"""
        if not self.keysafe:
            return
            
        info = f"ID = {self.keysafe['id']}\n"
        info += f"哈希算法 = {self.keysafe['password_hash']}\n"
        info += f"加密算法 = {self.keysafe['password_cipher']}\n"
        info += f"哈希轮数 = {self.keysafe['hash_round']}\n"
        info += f"盐值 = {hexlify(self.keysafe['salt']).decode()}\n"
        info += f"配置哈希 = {self.keysafe['config_hash']}"
        
        self.ks_info.setText(info)
    
    def start_cracking(self):
        """开始破解密码"""
        if not self.keysafe:
            QMessageBox.warning(self, "警告", "请先解析VMX文件")
            return
            
        dict_file = self.dict_path.text()
        if not dict_file:
            QMessageBox.warning(self, "警告", "请先选择密码字典文件")
            return
        
        # 检查字典文件是否存在
        if not os.path.isfile(dict_file):
            QMessageBox.warning(self, "警告", f"密码字典文件不存在: {dict_file}")
            return
        
        # 清空结果
        self.result_field.clear()
        self.progress_bar.setValue(0)
        self.save_button.setEnabled(False)
        
        # 创建并启动破解线程
        verbose = self.verbose_check.isChecked()
        update_interval = self.update_interval.value()
        self.cracker_thread = CrackerThread(self.keysafe, dict_file, verbose, update_interval)
        self.cracker_thread.update_signal.connect(self.log)
        self.cracker_thread.progress_signal.connect(self.update_progress)
        self.cracker_thread.result_signal.connect(self.show_result)
        self.cracker_thread.finished_signal.connect(self.cracking_finished)
        
        self.cracker_thread.start()
        
        # 更新按钮状态
        self.start_button.setEnabled(False)
        self.parse_button.setEnabled(False)
        self.stop_button.setEnabled(True)
    
    def stop_cracking(self):
        """停止破解"""
        if self.cracker_thread and self.cracker_thread.isRunning():
            self.log("正在停止破解...")
            self.cracker_thread.stop()
    
    def cracking_finished(self, success):
        """破解完成处理"""
        self.start_button.setEnabled(True)
        self.parse_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        
        if success:
            self.save_button.setEnabled(True)
            QMessageBox.information(self, "成功", "密码破解成功！")
        else:
            if self.cracker_thread and self.cracker_thread.running:
                QMessageBox.warning(self, "未找到", "未找到密码，请尝试其他字典。")
    
    def update_progress(self, value):
        """更新进度条"""
        self.progress_bar.setValue(value)
    
    def show_result(self, password):
        """显示破解结果"""
        self.result_field.setText(password)
    
    def save_results(self):
        """保存破解结果"""
        password = self.result_field.text()
        if not password:
            QMessageBox.warning(self, "警告", "没有可保存的结果")
            return
            
        file_path, _ = QFileDialog.getSaveFileName(self, "保存结果", "", "文本文件 (*.txt);;所有文件 (*)")
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"VMX文件: {self.vmx_path.text()}\n")
                    f.write(f"密码: {password}\n")
                    f.write(f"破解时间: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                    
                    # 添加密钥安全信息
                    f.write("\n密钥安全信息:\n")
                    f.write(f"ID = {self.keysafe['id']}\n")
                    f.write(f"哈希算法 = {self.keysafe['password_hash']}\n")
                    f.write(f"加密算法 = {self.keysafe['password_cipher']}\n")
                    f.write(f"哈希轮数 = {self.keysafe['hash_round']}\n")
                    f.write(f"盐值 = {hexlify(self.keysafe['salt']).decode()}\n")
                    f.write(f"配置哈希 = {self.keysafe['config_hash']}\n")
                
                self.log(f"结果已保存到: {file_path}")
                QMessageBox.information(self, "成功", f"结果已保存到: {file_path}")
            except Exception as e:
                QMessageBox.critical(self, "错误", f"保存结果失败: {str(e)}")
                self.log(f"保存结果错误: {str(e)}")
    
    def log(self, message):
        """添加日志信息"""
        self.log_output.append(message)
        # 滚动到底部
        self.log_output.moveCursor(QTextCursor.End)


def main():
    """主函数"""
    app = QApplication(sys.argv)
    window = VMXCrackerGUI()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()